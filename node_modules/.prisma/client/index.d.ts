
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: number
  email: string
  password: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Session
 * 
 */
export type Session = {
  id: number
  userId: number
  token: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Measurement
 * 
 */
export type Measurement = {
  id: number
  userId: number
  name: string
  morning: string
  afternoon: string
  night: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model PatientInformation
 * 
 */
export type PatientInformation = {
  id: number
  userId: number
  name: string
  cpf: string
  birthday: Date
  phone: string
  sex: string
  blood: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Vaccination
 * 
 */
export type Vaccination = {
  id: number
  userId: number
  name: string
  dose: string
  manufacturer: string
  lot: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Exam
 * 
 */
export type Exam = {
  id: number
  userId: number
  name: string
  examType: string
  description: string
  local: string
  createdAt: Date
  updatedAt: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<GlobalReject>;

  /**
   * `prisma.measurement`: Exposes CRUD operations for the **Measurement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Measurements
    * const measurements = await prisma.measurement.findMany()
    * ```
    */
  get measurement(): Prisma.MeasurementDelegate<GlobalReject>;

  /**
   * `prisma.patientInformation`: Exposes CRUD operations for the **PatientInformation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PatientInformations
    * const patientInformations = await prisma.patientInformation.findMany()
    * ```
    */
  get patientInformation(): Prisma.PatientInformationDelegate<GlobalReject>;

  /**
   * `prisma.vaccination`: Exposes CRUD operations for the **Vaccination** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vaccinations
    * const vaccinations = await prisma.vaccination.findMany()
    * ```
    */
  get vaccination(): Prisma.VaccinationDelegate<GlobalReject>;

  /**
   * `prisma.exam`: Exposes CRUD operations for the **Exam** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exams
    * const exams = await prisma.exam.findMany()
    * ```
    */
  get exam(): Prisma.ExamDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.14.0
   * Query Engine version: 2b0c12756921c891fec4f68d9444e18c7d5d4a6a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Session: 'Session',
    Measurement: 'Measurement',
    PatientInformation: 'PatientInformation',
    Vaccination: 'Vaccination',
    Exam: 'Exam'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    Session: number
    Measurement: number
    Vaccination: number
    Exam: number
    PatientInformation: number
  }

  export type UserCountOutputTypeSelect = {
    Session?: boolean
    Measurement?: boolean
    Vaccination?: boolean
    Exam?: boolean
    PatientInformation?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Session?: boolean | SessionFindManyArgs
    Measurement?: boolean | MeasurementFindManyArgs
    Vaccination?: boolean | VaccinationFindManyArgs
    Exam?: boolean | ExamFindManyArgs
    PatientInformation?: boolean | PatientInformationFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    Session?: boolean | SessionFindManyArgs
    Measurement?: boolean | MeasurementFindManyArgs
    Vaccination?: boolean | VaccinationFindManyArgs
    Exam?: boolean | ExamFindManyArgs
    PatientInformation?: boolean | PatientInformationFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Session' ? Array < SessionGetPayload<S['include'][P]>>  :
        P extends 'Measurement' ? Array < MeasurementGetPayload<S['include'][P]>>  :
        P extends 'Vaccination' ? Array < VaccinationGetPayload<S['include'][P]>>  :
        P extends 'Exam' ? Array < ExamGetPayload<S['include'][P]>>  :
        P extends 'PatientInformation' ? Array < PatientInformationGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Session' ? Array < SessionGetPayload<S['select'][P]>>  :
        P extends 'Measurement' ? Array < MeasurementGetPayload<S['select'][P]>>  :
        P extends 'Vaccination' ? Array < VaccinationGetPayload<S['select'][P]>>  :
        P extends 'Exam' ? Array < ExamGetPayload<S['select'][P]>>  :
        P extends 'PatientInformation' ? Array < PatientInformationGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Session<T extends SessionFindManyArgs = {}>(args?: Subset<T, SessionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Session>>, PrismaPromise<Array<SessionGetPayload<T>>>>;

    Measurement<T extends MeasurementFindManyArgs = {}>(args?: Subset<T, MeasurementFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Measurement>>, PrismaPromise<Array<MeasurementGetPayload<T>>>>;

    Vaccination<T extends VaccinationFindManyArgs = {}>(args?: Subset<T, VaccinationFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Vaccination>>, PrismaPromise<Array<VaccinationGetPayload<T>>>>;

    Exam<T extends ExamFindManyArgs = {}>(args?: Subset<T, ExamFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Exam>>, PrismaPromise<Array<ExamGetPayload<T>>>>;

    PatientInformation<T extends PatientInformationFindManyArgs = {}>(args?: Subset<T, PatientInformationFindManyArgs>): CheckSelect<T, PrismaPromise<Array<PatientInformation>>, PrismaPromise<Array<PatientInformationGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Session
   */


  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type SessionSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type SessionMinAggregateOutputType = {
    id: number | null
    userId: number | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    userId: number
    token: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SessionSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SessionMinAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SessionAggregateArgs = {
    /**
     * Filter which Session to aggregate.
     * 
    **/
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs = {
    where?: SessionWhereInput
    orderBy?: Enumerable<SessionOrderByWithAggregationInput>
    by: Array<SessionScalarFieldEnum>
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }


  export type SessionGroupByOutputType = {
    id: number
    userId: number
    token: string
    createdAt: Date
    updatedAt: Date
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect = {
    id?: boolean
    userId?: boolean
    User?: boolean | UserArgs
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SessionInclude = {
    User?: boolean | UserArgs
  }

  export type SessionGetPayload<
    S extends boolean | null | undefined | SessionArgs,
    U = keyof S
      > = S extends true
        ? Session
    : S extends undefined
    ? never
    : S extends SessionArgs | SessionFindManyArgs
    ?'include' extends U
    ? Session  & {
    [P in TrueKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> :  P extends keyof Session ? Session[P] : never
  } 
    : Session
  : Session


  type SessionCountArgs = Merge<
    Omit<SessionFindManyArgs, 'select' | 'include'> & {
      select?: SessionCountAggregateInputType | true
    }
  >

  export interface SessionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SessionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Session'> extends True ? CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>> : CheckSelect<T, Prisma__SessionClient<Session | null >, Prisma__SessionClient<SessionGetPayload<T> | null >>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SessionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Session'> extends True ? CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>> : CheckSelect<T, Prisma__SessionClient<Session | null >, Prisma__SessionClient<SessionGetPayload<T> | null >>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionFindManyArgs>(
      args?: SelectSubset<T, SessionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Session>>, PrismaPromise<Array<SessionGetPayload<T>>>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs>(
      args: SelectSubset<T, SessionCreateArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Create many Sessions.
     *     @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const session = await prisma.session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionCreateManyArgs>(
      args?: SelectSubset<T, SessionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs>(
      args: SelectSubset<T, SessionDeleteArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs>(
      args: SelectSubset<T, SessionUpdateArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs>(
      args?: SelectSubset<T, SessionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs>(
      args: SelectSubset<T, SessionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs>(
      args: SelectSubset<T, SessionUpsertArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SessionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Throw an Error if a Session can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Session to fetch.
     * 
    **/
    where: SessionWhereUniqueInput
  }


  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Throw an Error if a Session can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Session to fetch.
     * 
    **/
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     * 
    **/
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     * 
    **/
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session findMany
   */
  export type SessionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Filter, which Sessions to fetch.
     * 
    **/
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     * 
    **/
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session create
   */
  export type SessionCreateArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * The data needed to create a Session.
     * 
    **/
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }


  /**
   * Session createMany
   */
  export type SessionCreateManyArgs = {
    /**
     * The data used to create many Sessions.
     * 
    **/
    data: Enumerable<SessionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Session update
   */
  export type SessionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * The data needed to update a Session.
     * 
    **/
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     * 
    **/
    where: SessionWhereUniqueInput
  }


  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs = {
    /**
     * The data used to update Sessions.
     * 
    **/
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     * 
    **/
    where?: SessionWhereInput
  }


  /**
   * Session upsert
   */
  export type SessionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * The filter to search for the Session to update in case it exists.
     * 
    **/
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     * 
    **/
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }


  /**
   * Session delete
   */
  export type SessionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Filter which Session to delete.
     * 
    **/
    where: SessionWhereUniqueInput
  }


  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs = {
    /**
     * Filter which Sessions to delete
     * 
    **/
    where?: SessionWhereInput
  }


  /**
   * Session without action
   */
  export type SessionArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
  }



  /**
   * Model Measurement
   */


  export type AggregateMeasurement = {
    _count: MeasurementCountAggregateOutputType | null
    _avg: MeasurementAvgAggregateOutputType | null
    _sum: MeasurementSumAggregateOutputType | null
    _min: MeasurementMinAggregateOutputType | null
    _max: MeasurementMaxAggregateOutputType | null
  }

  export type MeasurementAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type MeasurementSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type MeasurementMinAggregateOutputType = {
    id: number | null
    userId: number | null
    name: string | null
    morning: string | null
    afternoon: string | null
    night: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MeasurementMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    name: string | null
    morning: string | null
    afternoon: string | null
    night: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MeasurementCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    morning: number
    afternoon: number
    night: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MeasurementAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type MeasurementSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type MeasurementMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    morning?: true
    afternoon?: true
    night?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MeasurementMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    morning?: true
    afternoon?: true
    night?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MeasurementCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    morning?: true
    afternoon?: true
    night?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MeasurementAggregateArgs = {
    /**
     * Filter which Measurement to aggregate.
     * 
    **/
    where?: MeasurementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Measurements to fetch.
     * 
    **/
    orderBy?: Enumerable<MeasurementOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: MeasurementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Measurements from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Measurements.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Measurements
    **/
    _count?: true | MeasurementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MeasurementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MeasurementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MeasurementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MeasurementMaxAggregateInputType
  }

  export type GetMeasurementAggregateType<T extends MeasurementAggregateArgs> = {
        [P in keyof T & keyof AggregateMeasurement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeasurement[P]>
      : GetScalarType<T[P], AggregateMeasurement[P]>
  }




  export type MeasurementGroupByArgs = {
    where?: MeasurementWhereInput
    orderBy?: Enumerable<MeasurementOrderByWithAggregationInput>
    by: Array<MeasurementScalarFieldEnum>
    having?: MeasurementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MeasurementCountAggregateInputType | true
    _avg?: MeasurementAvgAggregateInputType
    _sum?: MeasurementSumAggregateInputType
    _min?: MeasurementMinAggregateInputType
    _max?: MeasurementMaxAggregateInputType
  }


  export type MeasurementGroupByOutputType = {
    id: number
    userId: number
    name: string
    morning: string
    afternoon: string
    night: string
    createdAt: Date
    updatedAt: Date
    _count: MeasurementCountAggregateOutputType | null
    _avg: MeasurementAvgAggregateOutputType | null
    _sum: MeasurementSumAggregateOutputType | null
    _min: MeasurementMinAggregateOutputType | null
    _max: MeasurementMaxAggregateOutputType | null
  }

  type GetMeasurementGroupByPayload<T extends MeasurementGroupByArgs> = PrismaPromise<
    Array<
      PickArray<MeasurementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MeasurementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MeasurementGroupByOutputType[P]>
            : GetScalarType<T[P], MeasurementGroupByOutputType[P]>
        }
      >
    >


  export type MeasurementSelect = {
    id?: boolean
    userId?: boolean
    User?: boolean | UserArgs
    name?: boolean
    morning?: boolean
    afternoon?: boolean
    night?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MeasurementInclude = {
    User?: boolean | UserArgs
  }

  export type MeasurementGetPayload<
    S extends boolean | null | undefined | MeasurementArgs,
    U = keyof S
      > = S extends true
        ? Measurement
    : S extends undefined
    ? never
    : S extends MeasurementArgs | MeasurementFindManyArgs
    ?'include' extends U
    ? Measurement  & {
    [P in TrueKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> :  P extends keyof Measurement ? Measurement[P] : never
  } 
    : Measurement
  : Measurement


  type MeasurementCountArgs = Merge<
    Omit<MeasurementFindManyArgs, 'select' | 'include'> & {
      select?: MeasurementCountAggregateInputType | true
    }
  >

  export interface MeasurementDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Measurement that matches the filter.
     * @param {MeasurementFindUniqueArgs} args - Arguments to find a Measurement
     * @example
     * // Get one Measurement
     * const measurement = await prisma.measurement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MeasurementFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MeasurementFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Measurement'> extends True ? CheckSelect<T, Prisma__MeasurementClient<Measurement>, Prisma__MeasurementClient<MeasurementGetPayload<T>>> : CheckSelect<T, Prisma__MeasurementClient<Measurement | null >, Prisma__MeasurementClient<MeasurementGetPayload<T> | null >>

    /**
     * Find the first Measurement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeasurementFindFirstArgs} args - Arguments to find a Measurement
     * @example
     * // Get one Measurement
     * const measurement = await prisma.measurement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MeasurementFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MeasurementFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Measurement'> extends True ? CheckSelect<T, Prisma__MeasurementClient<Measurement>, Prisma__MeasurementClient<MeasurementGetPayload<T>>> : CheckSelect<T, Prisma__MeasurementClient<Measurement | null >, Prisma__MeasurementClient<MeasurementGetPayload<T> | null >>

    /**
     * Find zero or more Measurements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeasurementFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Measurements
     * const measurements = await prisma.measurement.findMany()
     * 
     * // Get first 10 Measurements
     * const measurements = await prisma.measurement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const measurementWithIdOnly = await prisma.measurement.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MeasurementFindManyArgs>(
      args?: SelectSubset<T, MeasurementFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Measurement>>, PrismaPromise<Array<MeasurementGetPayload<T>>>>

    /**
     * Create a Measurement.
     * @param {MeasurementCreateArgs} args - Arguments to create a Measurement.
     * @example
     * // Create one Measurement
     * const Measurement = await prisma.measurement.create({
     *   data: {
     *     // ... data to create a Measurement
     *   }
     * })
     * 
    **/
    create<T extends MeasurementCreateArgs>(
      args: SelectSubset<T, MeasurementCreateArgs>
    ): CheckSelect<T, Prisma__MeasurementClient<Measurement>, Prisma__MeasurementClient<MeasurementGetPayload<T>>>

    /**
     * Create many Measurements.
     *     @param {MeasurementCreateManyArgs} args - Arguments to create many Measurements.
     *     @example
     *     // Create many Measurements
     *     const measurement = await prisma.measurement.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MeasurementCreateManyArgs>(
      args?: SelectSubset<T, MeasurementCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Measurement.
     * @param {MeasurementDeleteArgs} args - Arguments to delete one Measurement.
     * @example
     * // Delete one Measurement
     * const Measurement = await prisma.measurement.delete({
     *   where: {
     *     // ... filter to delete one Measurement
     *   }
     * })
     * 
    **/
    delete<T extends MeasurementDeleteArgs>(
      args: SelectSubset<T, MeasurementDeleteArgs>
    ): CheckSelect<T, Prisma__MeasurementClient<Measurement>, Prisma__MeasurementClient<MeasurementGetPayload<T>>>

    /**
     * Update one Measurement.
     * @param {MeasurementUpdateArgs} args - Arguments to update one Measurement.
     * @example
     * // Update one Measurement
     * const measurement = await prisma.measurement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MeasurementUpdateArgs>(
      args: SelectSubset<T, MeasurementUpdateArgs>
    ): CheckSelect<T, Prisma__MeasurementClient<Measurement>, Prisma__MeasurementClient<MeasurementGetPayload<T>>>

    /**
     * Delete zero or more Measurements.
     * @param {MeasurementDeleteManyArgs} args - Arguments to filter Measurements to delete.
     * @example
     * // Delete a few Measurements
     * const { count } = await prisma.measurement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MeasurementDeleteManyArgs>(
      args?: SelectSubset<T, MeasurementDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Measurements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeasurementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Measurements
     * const measurement = await prisma.measurement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MeasurementUpdateManyArgs>(
      args: SelectSubset<T, MeasurementUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Measurement.
     * @param {MeasurementUpsertArgs} args - Arguments to update or create a Measurement.
     * @example
     * // Update or create a Measurement
     * const measurement = await prisma.measurement.upsert({
     *   create: {
     *     // ... data to create a Measurement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Measurement we want to update
     *   }
     * })
    **/
    upsert<T extends MeasurementUpsertArgs>(
      args: SelectSubset<T, MeasurementUpsertArgs>
    ): CheckSelect<T, Prisma__MeasurementClient<Measurement>, Prisma__MeasurementClient<MeasurementGetPayload<T>>>

    /**
     * Count the number of Measurements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeasurementCountArgs} args - Arguments to filter Measurements to count.
     * @example
     * // Count the number of Measurements
     * const count = await prisma.measurement.count({
     *   where: {
     *     // ... the filter for the Measurements we want to count
     *   }
     * })
    **/
    count<T extends MeasurementCountArgs>(
      args?: Subset<T, MeasurementCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MeasurementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Measurement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeasurementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MeasurementAggregateArgs>(args: Subset<T, MeasurementAggregateArgs>): PrismaPromise<GetMeasurementAggregateType<T>>

    /**
     * Group by Measurement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeasurementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MeasurementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MeasurementGroupByArgs['orderBy'] }
        : { orderBy?: MeasurementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MeasurementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeasurementGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Measurement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MeasurementClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Measurement findUnique
   */
  export type MeasurementFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Measurement
     * 
    **/
    select?: MeasurementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MeasurementInclude | null
    /**
     * Throw an Error if a Measurement can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Measurement to fetch.
     * 
    **/
    where: MeasurementWhereUniqueInput
  }


  /**
   * Measurement findFirst
   */
  export type MeasurementFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Measurement
     * 
    **/
    select?: MeasurementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MeasurementInclude | null
    /**
     * Throw an Error if a Measurement can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Measurement to fetch.
     * 
    **/
    where?: MeasurementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Measurements to fetch.
     * 
    **/
    orderBy?: Enumerable<MeasurementOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Measurements.
     * 
    **/
    cursor?: MeasurementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Measurements from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Measurements.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Measurements.
     * 
    **/
    distinct?: Enumerable<MeasurementScalarFieldEnum>
  }


  /**
   * Measurement findMany
   */
  export type MeasurementFindManyArgs = {
    /**
     * Select specific fields to fetch from the Measurement
     * 
    **/
    select?: MeasurementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MeasurementInclude | null
    /**
     * Filter, which Measurements to fetch.
     * 
    **/
    where?: MeasurementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Measurements to fetch.
     * 
    **/
    orderBy?: Enumerable<MeasurementOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Measurements.
     * 
    **/
    cursor?: MeasurementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Measurements from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Measurements.
     * 
    **/
    skip?: number
    distinct?: Enumerable<MeasurementScalarFieldEnum>
  }


  /**
   * Measurement create
   */
  export type MeasurementCreateArgs = {
    /**
     * Select specific fields to fetch from the Measurement
     * 
    **/
    select?: MeasurementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MeasurementInclude | null
    /**
     * The data needed to create a Measurement.
     * 
    **/
    data: XOR<MeasurementCreateInput, MeasurementUncheckedCreateInput>
  }


  /**
   * Measurement createMany
   */
  export type MeasurementCreateManyArgs = {
    /**
     * The data used to create many Measurements.
     * 
    **/
    data: Enumerable<MeasurementCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Measurement update
   */
  export type MeasurementUpdateArgs = {
    /**
     * Select specific fields to fetch from the Measurement
     * 
    **/
    select?: MeasurementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MeasurementInclude | null
    /**
     * The data needed to update a Measurement.
     * 
    **/
    data: XOR<MeasurementUpdateInput, MeasurementUncheckedUpdateInput>
    /**
     * Choose, which Measurement to update.
     * 
    **/
    where: MeasurementWhereUniqueInput
  }


  /**
   * Measurement updateMany
   */
  export type MeasurementUpdateManyArgs = {
    /**
     * The data used to update Measurements.
     * 
    **/
    data: XOR<MeasurementUpdateManyMutationInput, MeasurementUncheckedUpdateManyInput>
    /**
     * Filter which Measurements to update
     * 
    **/
    where?: MeasurementWhereInput
  }


  /**
   * Measurement upsert
   */
  export type MeasurementUpsertArgs = {
    /**
     * Select specific fields to fetch from the Measurement
     * 
    **/
    select?: MeasurementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MeasurementInclude | null
    /**
     * The filter to search for the Measurement to update in case it exists.
     * 
    **/
    where: MeasurementWhereUniqueInput
    /**
     * In case the Measurement found by the `where` argument doesn't exist, create a new Measurement with this data.
     * 
    **/
    create: XOR<MeasurementCreateInput, MeasurementUncheckedCreateInput>
    /**
     * In case the Measurement was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<MeasurementUpdateInput, MeasurementUncheckedUpdateInput>
  }


  /**
   * Measurement delete
   */
  export type MeasurementDeleteArgs = {
    /**
     * Select specific fields to fetch from the Measurement
     * 
    **/
    select?: MeasurementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MeasurementInclude | null
    /**
     * Filter which Measurement to delete.
     * 
    **/
    where: MeasurementWhereUniqueInput
  }


  /**
   * Measurement deleteMany
   */
  export type MeasurementDeleteManyArgs = {
    /**
     * Filter which Measurements to delete
     * 
    **/
    where?: MeasurementWhereInput
  }


  /**
   * Measurement without action
   */
  export type MeasurementArgs = {
    /**
     * Select specific fields to fetch from the Measurement
     * 
    **/
    select?: MeasurementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MeasurementInclude | null
  }



  /**
   * Model PatientInformation
   */


  export type AggregatePatientInformation = {
    _count: PatientInformationCountAggregateOutputType | null
    _avg: PatientInformationAvgAggregateOutputType | null
    _sum: PatientInformationSumAggregateOutputType | null
    _min: PatientInformationMinAggregateOutputType | null
    _max: PatientInformationMaxAggregateOutputType | null
  }

  export type PatientInformationAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type PatientInformationSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type PatientInformationMinAggregateOutputType = {
    id: number | null
    userId: number | null
    name: string | null
    cpf: string | null
    birthday: Date | null
    phone: string | null
    sex: string | null
    blood: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PatientInformationMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    name: string | null
    cpf: string | null
    birthday: Date | null
    phone: string | null
    sex: string | null
    blood: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PatientInformationCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    cpf: number
    birthday: number
    phone: number
    sex: number
    blood: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PatientInformationAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type PatientInformationSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type PatientInformationMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    cpf?: true
    birthday?: true
    phone?: true
    sex?: true
    blood?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PatientInformationMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    cpf?: true
    birthday?: true
    phone?: true
    sex?: true
    blood?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PatientInformationCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    cpf?: true
    birthday?: true
    phone?: true
    sex?: true
    blood?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PatientInformationAggregateArgs = {
    /**
     * Filter which PatientInformation to aggregate.
     * 
    **/
    where?: PatientInformationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientInformations to fetch.
     * 
    **/
    orderBy?: Enumerable<PatientInformationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PatientInformationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientInformations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientInformations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PatientInformations
    **/
    _count?: true | PatientInformationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatientInformationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatientInformationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientInformationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientInformationMaxAggregateInputType
  }

  export type GetPatientInformationAggregateType<T extends PatientInformationAggregateArgs> = {
        [P in keyof T & keyof AggregatePatientInformation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatientInformation[P]>
      : GetScalarType<T[P], AggregatePatientInformation[P]>
  }




  export type PatientInformationGroupByArgs = {
    where?: PatientInformationWhereInput
    orderBy?: Enumerable<PatientInformationOrderByWithAggregationInput>
    by: Array<PatientInformationScalarFieldEnum>
    having?: PatientInformationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientInformationCountAggregateInputType | true
    _avg?: PatientInformationAvgAggregateInputType
    _sum?: PatientInformationSumAggregateInputType
    _min?: PatientInformationMinAggregateInputType
    _max?: PatientInformationMaxAggregateInputType
  }


  export type PatientInformationGroupByOutputType = {
    id: number
    userId: number
    name: string
    cpf: string
    birthday: Date
    phone: string
    sex: string
    blood: string
    createdAt: Date
    updatedAt: Date
    _count: PatientInformationCountAggregateOutputType | null
    _avg: PatientInformationAvgAggregateOutputType | null
    _sum: PatientInformationSumAggregateOutputType | null
    _min: PatientInformationMinAggregateOutputType | null
    _max: PatientInformationMaxAggregateOutputType | null
  }

  type GetPatientInformationGroupByPayload<T extends PatientInformationGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PatientInformationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientInformationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientInformationGroupByOutputType[P]>
            : GetScalarType<T[P], PatientInformationGroupByOutputType[P]>
        }
      >
    >


  export type PatientInformationSelect = {
    id?: boolean
    userId?: boolean
    User?: boolean | UserArgs
    name?: boolean
    cpf?: boolean
    birthday?: boolean
    phone?: boolean
    sex?: boolean
    blood?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PatientInformationInclude = {
    User?: boolean | UserArgs
  }

  export type PatientInformationGetPayload<
    S extends boolean | null | undefined | PatientInformationArgs,
    U = keyof S
      > = S extends true
        ? PatientInformation
    : S extends undefined
    ? never
    : S extends PatientInformationArgs | PatientInformationFindManyArgs
    ?'include' extends U
    ? PatientInformation  & {
    [P in TrueKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> :  P extends keyof PatientInformation ? PatientInformation[P] : never
  } 
    : PatientInformation
  : PatientInformation


  type PatientInformationCountArgs = Merge<
    Omit<PatientInformationFindManyArgs, 'select' | 'include'> & {
      select?: PatientInformationCountAggregateInputType | true
    }
  >

  export interface PatientInformationDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one PatientInformation that matches the filter.
     * @param {PatientInformationFindUniqueArgs} args - Arguments to find a PatientInformation
     * @example
     * // Get one PatientInformation
     * const patientInformation = await prisma.patientInformation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PatientInformationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PatientInformationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'PatientInformation'> extends True ? CheckSelect<T, Prisma__PatientInformationClient<PatientInformation>, Prisma__PatientInformationClient<PatientInformationGetPayload<T>>> : CheckSelect<T, Prisma__PatientInformationClient<PatientInformation | null >, Prisma__PatientInformationClient<PatientInformationGetPayload<T> | null >>

    /**
     * Find the first PatientInformation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientInformationFindFirstArgs} args - Arguments to find a PatientInformation
     * @example
     * // Get one PatientInformation
     * const patientInformation = await prisma.patientInformation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PatientInformationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PatientInformationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'PatientInformation'> extends True ? CheckSelect<T, Prisma__PatientInformationClient<PatientInformation>, Prisma__PatientInformationClient<PatientInformationGetPayload<T>>> : CheckSelect<T, Prisma__PatientInformationClient<PatientInformation | null >, Prisma__PatientInformationClient<PatientInformationGetPayload<T> | null >>

    /**
     * Find zero or more PatientInformations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientInformationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PatientInformations
     * const patientInformations = await prisma.patientInformation.findMany()
     * 
     * // Get first 10 PatientInformations
     * const patientInformations = await prisma.patientInformation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientInformationWithIdOnly = await prisma.patientInformation.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PatientInformationFindManyArgs>(
      args?: SelectSubset<T, PatientInformationFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<PatientInformation>>, PrismaPromise<Array<PatientInformationGetPayload<T>>>>

    /**
     * Create a PatientInformation.
     * @param {PatientInformationCreateArgs} args - Arguments to create a PatientInformation.
     * @example
     * // Create one PatientInformation
     * const PatientInformation = await prisma.patientInformation.create({
     *   data: {
     *     // ... data to create a PatientInformation
     *   }
     * })
     * 
    **/
    create<T extends PatientInformationCreateArgs>(
      args: SelectSubset<T, PatientInformationCreateArgs>
    ): CheckSelect<T, Prisma__PatientInformationClient<PatientInformation>, Prisma__PatientInformationClient<PatientInformationGetPayload<T>>>

    /**
     * Create many PatientInformations.
     *     @param {PatientInformationCreateManyArgs} args - Arguments to create many PatientInformations.
     *     @example
     *     // Create many PatientInformations
     *     const patientInformation = await prisma.patientInformation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PatientInformationCreateManyArgs>(
      args?: SelectSubset<T, PatientInformationCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a PatientInformation.
     * @param {PatientInformationDeleteArgs} args - Arguments to delete one PatientInformation.
     * @example
     * // Delete one PatientInformation
     * const PatientInformation = await prisma.patientInformation.delete({
     *   where: {
     *     // ... filter to delete one PatientInformation
     *   }
     * })
     * 
    **/
    delete<T extends PatientInformationDeleteArgs>(
      args: SelectSubset<T, PatientInformationDeleteArgs>
    ): CheckSelect<T, Prisma__PatientInformationClient<PatientInformation>, Prisma__PatientInformationClient<PatientInformationGetPayload<T>>>

    /**
     * Update one PatientInformation.
     * @param {PatientInformationUpdateArgs} args - Arguments to update one PatientInformation.
     * @example
     * // Update one PatientInformation
     * const patientInformation = await prisma.patientInformation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PatientInformationUpdateArgs>(
      args: SelectSubset<T, PatientInformationUpdateArgs>
    ): CheckSelect<T, Prisma__PatientInformationClient<PatientInformation>, Prisma__PatientInformationClient<PatientInformationGetPayload<T>>>

    /**
     * Delete zero or more PatientInformations.
     * @param {PatientInformationDeleteManyArgs} args - Arguments to filter PatientInformations to delete.
     * @example
     * // Delete a few PatientInformations
     * const { count } = await prisma.patientInformation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PatientInformationDeleteManyArgs>(
      args?: SelectSubset<T, PatientInformationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientInformations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientInformationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PatientInformations
     * const patientInformation = await prisma.patientInformation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PatientInformationUpdateManyArgs>(
      args: SelectSubset<T, PatientInformationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one PatientInformation.
     * @param {PatientInformationUpsertArgs} args - Arguments to update or create a PatientInformation.
     * @example
     * // Update or create a PatientInformation
     * const patientInformation = await prisma.patientInformation.upsert({
     *   create: {
     *     // ... data to create a PatientInformation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PatientInformation we want to update
     *   }
     * })
    **/
    upsert<T extends PatientInformationUpsertArgs>(
      args: SelectSubset<T, PatientInformationUpsertArgs>
    ): CheckSelect<T, Prisma__PatientInformationClient<PatientInformation>, Prisma__PatientInformationClient<PatientInformationGetPayload<T>>>

    /**
     * Count the number of PatientInformations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientInformationCountArgs} args - Arguments to filter PatientInformations to count.
     * @example
     * // Count the number of PatientInformations
     * const count = await prisma.patientInformation.count({
     *   where: {
     *     // ... the filter for the PatientInformations we want to count
     *   }
     * })
    **/
    count<T extends PatientInformationCountArgs>(
      args?: Subset<T, PatientInformationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientInformationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PatientInformation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientInformationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientInformationAggregateArgs>(args: Subset<T, PatientInformationAggregateArgs>): PrismaPromise<GetPatientInformationAggregateType<T>>

    /**
     * Group by PatientInformation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientInformationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientInformationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientInformationGroupByArgs['orderBy'] }
        : { orderBy?: PatientInformationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientInformationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientInformationGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for PatientInformation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PatientInformationClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * PatientInformation findUnique
   */
  export type PatientInformationFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the PatientInformation
     * 
    **/
    select?: PatientInformationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PatientInformationInclude | null
    /**
     * Throw an Error if a PatientInformation can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which PatientInformation to fetch.
     * 
    **/
    where: PatientInformationWhereUniqueInput
  }


  /**
   * PatientInformation findFirst
   */
  export type PatientInformationFindFirstArgs = {
    /**
     * Select specific fields to fetch from the PatientInformation
     * 
    **/
    select?: PatientInformationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PatientInformationInclude | null
    /**
     * Throw an Error if a PatientInformation can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which PatientInformation to fetch.
     * 
    **/
    where?: PatientInformationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientInformations to fetch.
     * 
    **/
    orderBy?: Enumerable<PatientInformationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientInformations.
     * 
    **/
    cursor?: PatientInformationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientInformations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientInformations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientInformations.
     * 
    **/
    distinct?: Enumerable<PatientInformationScalarFieldEnum>
  }


  /**
   * PatientInformation findMany
   */
  export type PatientInformationFindManyArgs = {
    /**
     * Select specific fields to fetch from the PatientInformation
     * 
    **/
    select?: PatientInformationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PatientInformationInclude | null
    /**
     * Filter, which PatientInformations to fetch.
     * 
    **/
    where?: PatientInformationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientInformations to fetch.
     * 
    **/
    orderBy?: Enumerable<PatientInformationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PatientInformations.
     * 
    **/
    cursor?: PatientInformationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientInformations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientInformations.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PatientInformationScalarFieldEnum>
  }


  /**
   * PatientInformation create
   */
  export type PatientInformationCreateArgs = {
    /**
     * Select specific fields to fetch from the PatientInformation
     * 
    **/
    select?: PatientInformationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PatientInformationInclude | null
    /**
     * The data needed to create a PatientInformation.
     * 
    **/
    data: XOR<PatientInformationCreateInput, PatientInformationUncheckedCreateInput>
  }


  /**
   * PatientInformation createMany
   */
  export type PatientInformationCreateManyArgs = {
    /**
     * The data used to create many PatientInformations.
     * 
    **/
    data: Enumerable<PatientInformationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * PatientInformation update
   */
  export type PatientInformationUpdateArgs = {
    /**
     * Select specific fields to fetch from the PatientInformation
     * 
    **/
    select?: PatientInformationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PatientInformationInclude | null
    /**
     * The data needed to update a PatientInformation.
     * 
    **/
    data: XOR<PatientInformationUpdateInput, PatientInformationUncheckedUpdateInput>
    /**
     * Choose, which PatientInformation to update.
     * 
    **/
    where: PatientInformationWhereUniqueInput
  }


  /**
   * PatientInformation updateMany
   */
  export type PatientInformationUpdateManyArgs = {
    /**
     * The data used to update PatientInformations.
     * 
    **/
    data: XOR<PatientInformationUpdateManyMutationInput, PatientInformationUncheckedUpdateManyInput>
    /**
     * Filter which PatientInformations to update
     * 
    **/
    where?: PatientInformationWhereInput
  }


  /**
   * PatientInformation upsert
   */
  export type PatientInformationUpsertArgs = {
    /**
     * Select specific fields to fetch from the PatientInformation
     * 
    **/
    select?: PatientInformationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PatientInformationInclude | null
    /**
     * The filter to search for the PatientInformation to update in case it exists.
     * 
    **/
    where: PatientInformationWhereUniqueInput
    /**
     * In case the PatientInformation found by the `where` argument doesn't exist, create a new PatientInformation with this data.
     * 
    **/
    create: XOR<PatientInformationCreateInput, PatientInformationUncheckedCreateInput>
    /**
     * In case the PatientInformation was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PatientInformationUpdateInput, PatientInformationUncheckedUpdateInput>
  }


  /**
   * PatientInformation delete
   */
  export type PatientInformationDeleteArgs = {
    /**
     * Select specific fields to fetch from the PatientInformation
     * 
    **/
    select?: PatientInformationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PatientInformationInclude | null
    /**
     * Filter which PatientInformation to delete.
     * 
    **/
    where: PatientInformationWhereUniqueInput
  }


  /**
   * PatientInformation deleteMany
   */
  export type PatientInformationDeleteManyArgs = {
    /**
     * Filter which PatientInformations to delete
     * 
    **/
    where?: PatientInformationWhereInput
  }


  /**
   * PatientInformation without action
   */
  export type PatientInformationArgs = {
    /**
     * Select specific fields to fetch from the PatientInformation
     * 
    **/
    select?: PatientInformationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PatientInformationInclude | null
  }



  /**
   * Model Vaccination
   */


  export type AggregateVaccination = {
    _count: VaccinationCountAggregateOutputType | null
    _avg: VaccinationAvgAggregateOutputType | null
    _sum: VaccinationSumAggregateOutputType | null
    _min: VaccinationMinAggregateOutputType | null
    _max: VaccinationMaxAggregateOutputType | null
  }

  export type VaccinationAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type VaccinationSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type VaccinationMinAggregateOutputType = {
    id: number | null
    userId: number | null
    name: string | null
    dose: string | null
    manufacturer: string | null
    lot: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VaccinationMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    name: string | null
    dose: string | null
    manufacturer: string | null
    lot: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VaccinationCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    dose: number
    manufacturer: number
    lot: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VaccinationAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type VaccinationSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type VaccinationMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    dose?: true
    manufacturer?: true
    lot?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VaccinationMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    dose?: true
    manufacturer?: true
    lot?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VaccinationCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    dose?: true
    manufacturer?: true
    lot?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VaccinationAggregateArgs = {
    /**
     * Filter which Vaccination to aggregate.
     * 
    **/
    where?: VaccinationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vaccinations to fetch.
     * 
    **/
    orderBy?: Enumerable<VaccinationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: VaccinationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vaccinations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vaccinations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vaccinations
    **/
    _count?: true | VaccinationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VaccinationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VaccinationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VaccinationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VaccinationMaxAggregateInputType
  }

  export type GetVaccinationAggregateType<T extends VaccinationAggregateArgs> = {
        [P in keyof T & keyof AggregateVaccination]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVaccination[P]>
      : GetScalarType<T[P], AggregateVaccination[P]>
  }




  export type VaccinationGroupByArgs = {
    where?: VaccinationWhereInput
    orderBy?: Enumerable<VaccinationOrderByWithAggregationInput>
    by: Array<VaccinationScalarFieldEnum>
    having?: VaccinationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VaccinationCountAggregateInputType | true
    _avg?: VaccinationAvgAggregateInputType
    _sum?: VaccinationSumAggregateInputType
    _min?: VaccinationMinAggregateInputType
    _max?: VaccinationMaxAggregateInputType
  }


  export type VaccinationGroupByOutputType = {
    id: number
    userId: number
    name: string
    dose: string
    manufacturer: string
    lot: string
    createdAt: Date
    updatedAt: Date
    _count: VaccinationCountAggregateOutputType | null
    _avg: VaccinationAvgAggregateOutputType | null
    _sum: VaccinationSumAggregateOutputType | null
    _min: VaccinationMinAggregateOutputType | null
    _max: VaccinationMaxAggregateOutputType | null
  }

  type GetVaccinationGroupByPayload<T extends VaccinationGroupByArgs> = PrismaPromise<
    Array<
      PickArray<VaccinationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VaccinationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VaccinationGroupByOutputType[P]>
            : GetScalarType<T[P], VaccinationGroupByOutputType[P]>
        }
      >
    >


  export type VaccinationSelect = {
    id?: boolean
    userId?: boolean
    User?: boolean | UserArgs
    name?: boolean
    dose?: boolean
    manufacturer?: boolean
    lot?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VaccinationInclude = {
    User?: boolean | UserArgs
  }

  export type VaccinationGetPayload<
    S extends boolean | null | undefined | VaccinationArgs,
    U = keyof S
      > = S extends true
        ? Vaccination
    : S extends undefined
    ? never
    : S extends VaccinationArgs | VaccinationFindManyArgs
    ?'include' extends U
    ? Vaccination  & {
    [P in TrueKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> :  P extends keyof Vaccination ? Vaccination[P] : never
  } 
    : Vaccination
  : Vaccination


  type VaccinationCountArgs = Merge<
    Omit<VaccinationFindManyArgs, 'select' | 'include'> & {
      select?: VaccinationCountAggregateInputType | true
    }
  >

  export interface VaccinationDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Vaccination that matches the filter.
     * @param {VaccinationFindUniqueArgs} args - Arguments to find a Vaccination
     * @example
     * // Get one Vaccination
     * const vaccination = await prisma.vaccination.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VaccinationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VaccinationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Vaccination'> extends True ? CheckSelect<T, Prisma__VaccinationClient<Vaccination>, Prisma__VaccinationClient<VaccinationGetPayload<T>>> : CheckSelect<T, Prisma__VaccinationClient<Vaccination | null >, Prisma__VaccinationClient<VaccinationGetPayload<T> | null >>

    /**
     * Find the first Vaccination that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VaccinationFindFirstArgs} args - Arguments to find a Vaccination
     * @example
     * // Get one Vaccination
     * const vaccination = await prisma.vaccination.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VaccinationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VaccinationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Vaccination'> extends True ? CheckSelect<T, Prisma__VaccinationClient<Vaccination>, Prisma__VaccinationClient<VaccinationGetPayload<T>>> : CheckSelect<T, Prisma__VaccinationClient<Vaccination | null >, Prisma__VaccinationClient<VaccinationGetPayload<T> | null >>

    /**
     * Find zero or more Vaccinations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VaccinationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vaccinations
     * const vaccinations = await prisma.vaccination.findMany()
     * 
     * // Get first 10 Vaccinations
     * const vaccinations = await prisma.vaccination.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vaccinationWithIdOnly = await prisma.vaccination.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VaccinationFindManyArgs>(
      args?: SelectSubset<T, VaccinationFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Vaccination>>, PrismaPromise<Array<VaccinationGetPayload<T>>>>

    /**
     * Create a Vaccination.
     * @param {VaccinationCreateArgs} args - Arguments to create a Vaccination.
     * @example
     * // Create one Vaccination
     * const Vaccination = await prisma.vaccination.create({
     *   data: {
     *     // ... data to create a Vaccination
     *   }
     * })
     * 
    **/
    create<T extends VaccinationCreateArgs>(
      args: SelectSubset<T, VaccinationCreateArgs>
    ): CheckSelect<T, Prisma__VaccinationClient<Vaccination>, Prisma__VaccinationClient<VaccinationGetPayload<T>>>

    /**
     * Create many Vaccinations.
     *     @param {VaccinationCreateManyArgs} args - Arguments to create many Vaccinations.
     *     @example
     *     // Create many Vaccinations
     *     const vaccination = await prisma.vaccination.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VaccinationCreateManyArgs>(
      args?: SelectSubset<T, VaccinationCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Vaccination.
     * @param {VaccinationDeleteArgs} args - Arguments to delete one Vaccination.
     * @example
     * // Delete one Vaccination
     * const Vaccination = await prisma.vaccination.delete({
     *   where: {
     *     // ... filter to delete one Vaccination
     *   }
     * })
     * 
    **/
    delete<T extends VaccinationDeleteArgs>(
      args: SelectSubset<T, VaccinationDeleteArgs>
    ): CheckSelect<T, Prisma__VaccinationClient<Vaccination>, Prisma__VaccinationClient<VaccinationGetPayload<T>>>

    /**
     * Update one Vaccination.
     * @param {VaccinationUpdateArgs} args - Arguments to update one Vaccination.
     * @example
     * // Update one Vaccination
     * const vaccination = await prisma.vaccination.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VaccinationUpdateArgs>(
      args: SelectSubset<T, VaccinationUpdateArgs>
    ): CheckSelect<T, Prisma__VaccinationClient<Vaccination>, Prisma__VaccinationClient<VaccinationGetPayload<T>>>

    /**
     * Delete zero or more Vaccinations.
     * @param {VaccinationDeleteManyArgs} args - Arguments to filter Vaccinations to delete.
     * @example
     * // Delete a few Vaccinations
     * const { count } = await prisma.vaccination.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VaccinationDeleteManyArgs>(
      args?: SelectSubset<T, VaccinationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vaccinations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VaccinationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vaccinations
     * const vaccination = await prisma.vaccination.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VaccinationUpdateManyArgs>(
      args: SelectSubset<T, VaccinationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Vaccination.
     * @param {VaccinationUpsertArgs} args - Arguments to update or create a Vaccination.
     * @example
     * // Update or create a Vaccination
     * const vaccination = await prisma.vaccination.upsert({
     *   create: {
     *     // ... data to create a Vaccination
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vaccination we want to update
     *   }
     * })
    **/
    upsert<T extends VaccinationUpsertArgs>(
      args: SelectSubset<T, VaccinationUpsertArgs>
    ): CheckSelect<T, Prisma__VaccinationClient<Vaccination>, Prisma__VaccinationClient<VaccinationGetPayload<T>>>

    /**
     * Count the number of Vaccinations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VaccinationCountArgs} args - Arguments to filter Vaccinations to count.
     * @example
     * // Count the number of Vaccinations
     * const count = await prisma.vaccination.count({
     *   where: {
     *     // ... the filter for the Vaccinations we want to count
     *   }
     * })
    **/
    count<T extends VaccinationCountArgs>(
      args?: Subset<T, VaccinationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VaccinationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vaccination.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VaccinationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VaccinationAggregateArgs>(args: Subset<T, VaccinationAggregateArgs>): PrismaPromise<GetVaccinationAggregateType<T>>

    /**
     * Group by Vaccination.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VaccinationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VaccinationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VaccinationGroupByArgs['orderBy'] }
        : { orderBy?: VaccinationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VaccinationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVaccinationGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vaccination.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VaccinationClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Vaccination findUnique
   */
  export type VaccinationFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Vaccination
     * 
    **/
    select?: VaccinationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VaccinationInclude | null
    /**
     * Throw an Error if a Vaccination can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Vaccination to fetch.
     * 
    **/
    where: VaccinationWhereUniqueInput
  }


  /**
   * Vaccination findFirst
   */
  export type VaccinationFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Vaccination
     * 
    **/
    select?: VaccinationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VaccinationInclude | null
    /**
     * Throw an Error if a Vaccination can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Vaccination to fetch.
     * 
    **/
    where?: VaccinationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vaccinations to fetch.
     * 
    **/
    orderBy?: Enumerable<VaccinationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vaccinations.
     * 
    **/
    cursor?: VaccinationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vaccinations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vaccinations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vaccinations.
     * 
    **/
    distinct?: Enumerable<VaccinationScalarFieldEnum>
  }


  /**
   * Vaccination findMany
   */
  export type VaccinationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Vaccination
     * 
    **/
    select?: VaccinationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VaccinationInclude | null
    /**
     * Filter, which Vaccinations to fetch.
     * 
    **/
    where?: VaccinationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vaccinations to fetch.
     * 
    **/
    orderBy?: Enumerable<VaccinationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vaccinations.
     * 
    **/
    cursor?: VaccinationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vaccinations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vaccinations.
     * 
    **/
    skip?: number
    distinct?: Enumerable<VaccinationScalarFieldEnum>
  }


  /**
   * Vaccination create
   */
  export type VaccinationCreateArgs = {
    /**
     * Select specific fields to fetch from the Vaccination
     * 
    **/
    select?: VaccinationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VaccinationInclude | null
    /**
     * The data needed to create a Vaccination.
     * 
    **/
    data: XOR<VaccinationCreateInput, VaccinationUncheckedCreateInput>
  }


  /**
   * Vaccination createMany
   */
  export type VaccinationCreateManyArgs = {
    /**
     * The data used to create many Vaccinations.
     * 
    **/
    data: Enumerable<VaccinationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Vaccination update
   */
  export type VaccinationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Vaccination
     * 
    **/
    select?: VaccinationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VaccinationInclude | null
    /**
     * The data needed to update a Vaccination.
     * 
    **/
    data: XOR<VaccinationUpdateInput, VaccinationUncheckedUpdateInput>
    /**
     * Choose, which Vaccination to update.
     * 
    **/
    where: VaccinationWhereUniqueInput
  }


  /**
   * Vaccination updateMany
   */
  export type VaccinationUpdateManyArgs = {
    /**
     * The data used to update Vaccinations.
     * 
    **/
    data: XOR<VaccinationUpdateManyMutationInput, VaccinationUncheckedUpdateManyInput>
    /**
     * Filter which Vaccinations to update
     * 
    **/
    where?: VaccinationWhereInput
  }


  /**
   * Vaccination upsert
   */
  export type VaccinationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Vaccination
     * 
    **/
    select?: VaccinationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VaccinationInclude | null
    /**
     * The filter to search for the Vaccination to update in case it exists.
     * 
    **/
    where: VaccinationWhereUniqueInput
    /**
     * In case the Vaccination found by the `where` argument doesn't exist, create a new Vaccination with this data.
     * 
    **/
    create: XOR<VaccinationCreateInput, VaccinationUncheckedCreateInput>
    /**
     * In case the Vaccination was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<VaccinationUpdateInput, VaccinationUncheckedUpdateInput>
  }


  /**
   * Vaccination delete
   */
  export type VaccinationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Vaccination
     * 
    **/
    select?: VaccinationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VaccinationInclude | null
    /**
     * Filter which Vaccination to delete.
     * 
    **/
    where: VaccinationWhereUniqueInput
  }


  /**
   * Vaccination deleteMany
   */
  export type VaccinationDeleteManyArgs = {
    /**
     * Filter which Vaccinations to delete
     * 
    **/
    where?: VaccinationWhereInput
  }


  /**
   * Vaccination without action
   */
  export type VaccinationArgs = {
    /**
     * Select specific fields to fetch from the Vaccination
     * 
    **/
    select?: VaccinationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VaccinationInclude | null
  }



  /**
   * Model Exam
   */


  export type AggregateExam = {
    _count: ExamCountAggregateOutputType | null
    _avg: ExamAvgAggregateOutputType | null
    _sum: ExamSumAggregateOutputType | null
    _min: ExamMinAggregateOutputType | null
    _max: ExamMaxAggregateOutputType | null
  }

  export type ExamAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ExamSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ExamMinAggregateOutputType = {
    id: number | null
    userId: number | null
    name: string | null
    examType: string | null
    description: string | null
    local: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ExamMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    name: string | null
    examType: string | null
    description: string | null
    local: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ExamCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    examType: number
    description: number
    local: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ExamAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ExamSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ExamMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    examType?: true
    description?: true
    local?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ExamMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    examType?: true
    description?: true
    local?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ExamCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    examType?: true
    description?: true
    local?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ExamAggregateArgs = {
    /**
     * Filter which Exam to aggregate.
     * 
    **/
    where?: ExamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exams to fetch.
     * 
    **/
    orderBy?: Enumerable<ExamOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ExamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exams from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exams.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Exams
    **/
    _count?: true | ExamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExamMaxAggregateInputType
  }

  export type GetExamAggregateType<T extends ExamAggregateArgs> = {
        [P in keyof T & keyof AggregateExam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExam[P]>
      : GetScalarType<T[P], AggregateExam[P]>
  }




  export type ExamGroupByArgs = {
    where?: ExamWhereInput
    orderBy?: Enumerable<ExamOrderByWithAggregationInput>
    by: Array<ExamScalarFieldEnum>
    having?: ExamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExamCountAggregateInputType | true
    _avg?: ExamAvgAggregateInputType
    _sum?: ExamSumAggregateInputType
    _min?: ExamMinAggregateInputType
    _max?: ExamMaxAggregateInputType
  }


  export type ExamGroupByOutputType = {
    id: number
    userId: number
    name: string
    examType: string
    description: string
    local: string
    createdAt: Date
    updatedAt: Date
    _count: ExamCountAggregateOutputType | null
    _avg: ExamAvgAggregateOutputType | null
    _sum: ExamSumAggregateOutputType | null
    _min: ExamMinAggregateOutputType | null
    _max: ExamMaxAggregateOutputType | null
  }

  type GetExamGroupByPayload<T extends ExamGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ExamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExamGroupByOutputType[P]>
            : GetScalarType<T[P], ExamGroupByOutputType[P]>
        }
      >
    >


  export type ExamSelect = {
    id?: boolean
    userId?: boolean
    User?: boolean | UserArgs
    name?: boolean
    examType?: boolean
    description?: boolean
    local?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ExamInclude = {
    User?: boolean | UserArgs
  }

  export type ExamGetPayload<
    S extends boolean | null | undefined | ExamArgs,
    U = keyof S
      > = S extends true
        ? Exam
    : S extends undefined
    ? never
    : S extends ExamArgs | ExamFindManyArgs
    ?'include' extends U
    ? Exam  & {
    [P in TrueKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> :  P extends keyof Exam ? Exam[P] : never
  } 
    : Exam
  : Exam


  type ExamCountArgs = Merge<
    Omit<ExamFindManyArgs, 'select' | 'include'> & {
      select?: ExamCountAggregateInputType | true
    }
  >

  export interface ExamDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Exam that matches the filter.
     * @param {ExamFindUniqueArgs} args - Arguments to find a Exam
     * @example
     * // Get one Exam
     * const exam = await prisma.exam.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExamFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ExamFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Exam'> extends True ? CheckSelect<T, Prisma__ExamClient<Exam>, Prisma__ExamClient<ExamGetPayload<T>>> : CheckSelect<T, Prisma__ExamClient<Exam | null >, Prisma__ExamClient<ExamGetPayload<T> | null >>

    /**
     * Find the first Exam that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamFindFirstArgs} args - Arguments to find a Exam
     * @example
     * // Get one Exam
     * const exam = await prisma.exam.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExamFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ExamFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Exam'> extends True ? CheckSelect<T, Prisma__ExamClient<Exam>, Prisma__ExamClient<ExamGetPayload<T>>> : CheckSelect<T, Prisma__ExamClient<Exam | null >, Prisma__ExamClient<ExamGetPayload<T> | null >>

    /**
     * Find zero or more Exams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exams
     * const exams = await prisma.exam.findMany()
     * 
     * // Get first 10 Exams
     * const exams = await prisma.exam.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const examWithIdOnly = await prisma.exam.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ExamFindManyArgs>(
      args?: SelectSubset<T, ExamFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Exam>>, PrismaPromise<Array<ExamGetPayload<T>>>>

    /**
     * Create a Exam.
     * @param {ExamCreateArgs} args - Arguments to create a Exam.
     * @example
     * // Create one Exam
     * const Exam = await prisma.exam.create({
     *   data: {
     *     // ... data to create a Exam
     *   }
     * })
     * 
    **/
    create<T extends ExamCreateArgs>(
      args: SelectSubset<T, ExamCreateArgs>
    ): CheckSelect<T, Prisma__ExamClient<Exam>, Prisma__ExamClient<ExamGetPayload<T>>>

    /**
     * Create many Exams.
     *     @param {ExamCreateManyArgs} args - Arguments to create many Exams.
     *     @example
     *     // Create many Exams
     *     const exam = await prisma.exam.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ExamCreateManyArgs>(
      args?: SelectSubset<T, ExamCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Exam.
     * @param {ExamDeleteArgs} args - Arguments to delete one Exam.
     * @example
     * // Delete one Exam
     * const Exam = await prisma.exam.delete({
     *   where: {
     *     // ... filter to delete one Exam
     *   }
     * })
     * 
    **/
    delete<T extends ExamDeleteArgs>(
      args: SelectSubset<T, ExamDeleteArgs>
    ): CheckSelect<T, Prisma__ExamClient<Exam>, Prisma__ExamClient<ExamGetPayload<T>>>

    /**
     * Update one Exam.
     * @param {ExamUpdateArgs} args - Arguments to update one Exam.
     * @example
     * // Update one Exam
     * const exam = await prisma.exam.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExamUpdateArgs>(
      args: SelectSubset<T, ExamUpdateArgs>
    ): CheckSelect<T, Prisma__ExamClient<Exam>, Prisma__ExamClient<ExamGetPayload<T>>>

    /**
     * Delete zero or more Exams.
     * @param {ExamDeleteManyArgs} args - Arguments to filter Exams to delete.
     * @example
     * // Delete a few Exams
     * const { count } = await prisma.exam.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExamDeleteManyArgs>(
      args?: SelectSubset<T, ExamDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exams
     * const exam = await prisma.exam.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExamUpdateManyArgs>(
      args: SelectSubset<T, ExamUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Exam.
     * @param {ExamUpsertArgs} args - Arguments to update or create a Exam.
     * @example
     * // Update or create a Exam
     * const exam = await prisma.exam.upsert({
     *   create: {
     *     // ... data to create a Exam
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exam we want to update
     *   }
     * })
    **/
    upsert<T extends ExamUpsertArgs>(
      args: SelectSubset<T, ExamUpsertArgs>
    ): CheckSelect<T, Prisma__ExamClient<Exam>, Prisma__ExamClient<ExamGetPayload<T>>>

    /**
     * Count the number of Exams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamCountArgs} args - Arguments to filter Exams to count.
     * @example
     * // Count the number of Exams
     * const count = await prisma.exam.count({
     *   where: {
     *     // ... the filter for the Exams we want to count
     *   }
     * })
    **/
    count<T extends ExamCountArgs>(
      args?: Subset<T, ExamCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exam.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExamAggregateArgs>(args: Subset<T, ExamAggregateArgs>): PrismaPromise<GetExamAggregateType<T>>

    /**
     * Group by Exam.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExamGroupByArgs['orderBy'] }
        : { orderBy?: ExamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExamGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Exam.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ExamClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Exam findUnique
   */
  export type ExamFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Exam
     * 
    **/
    select?: ExamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExamInclude | null
    /**
     * Throw an Error if a Exam can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Exam to fetch.
     * 
    **/
    where: ExamWhereUniqueInput
  }


  /**
   * Exam findFirst
   */
  export type ExamFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Exam
     * 
    **/
    select?: ExamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExamInclude | null
    /**
     * Throw an Error if a Exam can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Exam to fetch.
     * 
    **/
    where?: ExamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exams to fetch.
     * 
    **/
    orderBy?: Enumerable<ExamOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exams.
     * 
    **/
    cursor?: ExamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exams from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exams.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exams.
     * 
    **/
    distinct?: Enumerable<ExamScalarFieldEnum>
  }


  /**
   * Exam findMany
   */
  export type ExamFindManyArgs = {
    /**
     * Select specific fields to fetch from the Exam
     * 
    **/
    select?: ExamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExamInclude | null
    /**
     * Filter, which Exams to fetch.
     * 
    **/
    where?: ExamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exams to fetch.
     * 
    **/
    orderBy?: Enumerable<ExamOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Exams.
     * 
    **/
    cursor?: ExamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exams from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exams.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ExamScalarFieldEnum>
  }


  /**
   * Exam create
   */
  export type ExamCreateArgs = {
    /**
     * Select specific fields to fetch from the Exam
     * 
    **/
    select?: ExamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExamInclude | null
    /**
     * The data needed to create a Exam.
     * 
    **/
    data: XOR<ExamCreateInput, ExamUncheckedCreateInput>
  }


  /**
   * Exam createMany
   */
  export type ExamCreateManyArgs = {
    /**
     * The data used to create many Exams.
     * 
    **/
    data: Enumerable<ExamCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Exam update
   */
  export type ExamUpdateArgs = {
    /**
     * Select specific fields to fetch from the Exam
     * 
    **/
    select?: ExamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExamInclude | null
    /**
     * The data needed to update a Exam.
     * 
    **/
    data: XOR<ExamUpdateInput, ExamUncheckedUpdateInput>
    /**
     * Choose, which Exam to update.
     * 
    **/
    where: ExamWhereUniqueInput
  }


  /**
   * Exam updateMany
   */
  export type ExamUpdateManyArgs = {
    /**
     * The data used to update Exams.
     * 
    **/
    data: XOR<ExamUpdateManyMutationInput, ExamUncheckedUpdateManyInput>
    /**
     * Filter which Exams to update
     * 
    **/
    where?: ExamWhereInput
  }


  /**
   * Exam upsert
   */
  export type ExamUpsertArgs = {
    /**
     * Select specific fields to fetch from the Exam
     * 
    **/
    select?: ExamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExamInclude | null
    /**
     * The filter to search for the Exam to update in case it exists.
     * 
    **/
    where: ExamWhereUniqueInput
    /**
     * In case the Exam found by the `where` argument doesn't exist, create a new Exam with this data.
     * 
    **/
    create: XOR<ExamCreateInput, ExamUncheckedCreateInput>
    /**
     * In case the Exam was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ExamUpdateInput, ExamUncheckedUpdateInput>
  }


  /**
   * Exam delete
   */
  export type ExamDeleteArgs = {
    /**
     * Select specific fields to fetch from the Exam
     * 
    **/
    select?: ExamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExamInclude | null
    /**
     * Filter which Exam to delete.
     * 
    **/
    where: ExamWhereUniqueInput
  }


  /**
   * Exam deleteMany
   */
  export type ExamDeleteManyArgs = {
    /**
     * Filter which Exams to delete
     * 
    **/
    where?: ExamWhereInput
  }


  /**
   * Exam without action
   */
  export type ExamArgs = {
    /**
     * Select specific fields to fetch from the Exam
     * 
    **/
    select?: ExamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExamInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    token: 'token',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const MeasurementScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    morning: 'morning',
    afternoon: 'afternoon',
    night: 'night',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MeasurementScalarFieldEnum = (typeof MeasurementScalarFieldEnum)[keyof typeof MeasurementScalarFieldEnum]


  export const PatientInformationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    cpf: 'cpf',
    birthday: 'birthday',
    phone: 'phone',
    sex: 'sex',
    blood: 'blood',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PatientInformationScalarFieldEnum = (typeof PatientInformationScalarFieldEnum)[keyof typeof PatientInformationScalarFieldEnum]


  export const VaccinationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    dose: 'dose',
    manufacturer: 'manufacturer',
    lot: 'lot',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VaccinationScalarFieldEnum = (typeof VaccinationScalarFieldEnum)[keyof typeof VaccinationScalarFieldEnum]


  export const ExamScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    examType: 'examType',
    description: 'description',
    local: 'local',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ExamScalarFieldEnum = (typeof ExamScalarFieldEnum)[keyof typeof ExamScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    password?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    Session?: SessionListRelationFilter
    Measurement?: MeasurementListRelationFilter
    Vaccination?: VaccinationListRelationFilter
    Exam?: ExamListRelationFilter
    PatientInformation?: PatientInformationListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Session?: SessionOrderByRelationAggregateInput
    Measurement?: MeasurementOrderByRelationAggregateInput
    Vaccination?: VaccinationOrderByRelationAggregateInput
    Exam?: ExamOrderByRelationAggregateInput
    PatientInformation?: PatientInformationOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type SessionWhereInput = {
    AND?: Enumerable<SessionWhereInput>
    OR?: Enumerable<SessionWhereInput>
    NOT?: Enumerable<SessionWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    User?: XOR<UserRelationFilter, UserWhereInput>
    token?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    User?: UserOrderByWithRelationInput
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionWhereUniqueInput = {
    id?: number
  }

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _avg?: SessionAvgOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
    _sum?: SessionSumOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SessionScalarWhereWithAggregatesInput>
    OR?: Enumerable<SessionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SessionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    token?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type MeasurementWhereInput = {
    AND?: Enumerable<MeasurementWhereInput>
    OR?: Enumerable<MeasurementWhereInput>
    NOT?: Enumerable<MeasurementWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    User?: XOR<UserRelationFilter, UserWhereInput>
    name?: StringFilter | string
    morning?: StringFilter | string
    afternoon?: StringFilter | string
    night?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type MeasurementOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    User?: UserOrderByWithRelationInput
    name?: SortOrder
    morning?: SortOrder
    afternoon?: SortOrder
    night?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeasurementWhereUniqueInput = {
    id?: number
  }

  export type MeasurementOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    morning?: SortOrder
    afternoon?: SortOrder
    night?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MeasurementCountOrderByAggregateInput
    _avg?: MeasurementAvgOrderByAggregateInput
    _max?: MeasurementMaxOrderByAggregateInput
    _min?: MeasurementMinOrderByAggregateInput
    _sum?: MeasurementSumOrderByAggregateInput
  }

  export type MeasurementScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MeasurementScalarWhereWithAggregatesInput>
    OR?: Enumerable<MeasurementScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MeasurementScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    morning?: StringWithAggregatesFilter | string
    afternoon?: StringWithAggregatesFilter | string
    night?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type PatientInformationWhereInput = {
    AND?: Enumerable<PatientInformationWhereInput>
    OR?: Enumerable<PatientInformationWhereInput>
    NOT?: Enumerable<PatientInformationWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    User?: XOR<UserRelationFilter, UserWhereInput>
    name?: StringFilter | string
    cpf?: StringFilter | string
    birthday?: DateTimeFilter | Date | string
    phone?: StringFilter | string
    sex?: StringFilter | string
    blood?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type PatientInformationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    User?: UserOrderByWithRelationInput
    name?: SortOrder
    cpf?: SortOrder
    birthday?: SortOrder
    phone?: SortOrder
    sex?: SortOrder
    blood?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PatientInformationWhereUniqueInput = {
    id?: number
    userId?: number
  }

  export type PatientInformationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    birthday?: SortOrder
    phone?: SortOrder
    sex?: SortOrder
    blood?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PatientInformationCountOrderByAggregateInput
    _avg?: PatientInformationAvgOrderByAggregateInput
    _max?: PatientInformationMaxOrderByAggregateInput
    _min?: PatientInformationMinOrderByAggregateInput
    _sum?: PatientInformationSumOrderByAggregateInput
  }

  export type PatientInformationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PatientInformationScalarWhereWithAggregatesInput>
    OR?: Enumerable<PatientInformationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PatientInformationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    cpf?: StringWithAggregatesFilter | string
    birthday?: DateTimeWithAggregatesFilter | Date | string
    phone?: StringWithAggregatesFilter | string
    sex?: StringWithAggregatesFilter | string
    blood?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type VaccinationWhereInput = {
    AND?: Enumerable<VaccinationWhereInput>
    OR?: Enumerable<VaccinationWhereInput>
    NOT?: Enumerable<VaccinationWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    User?: XOR<UserRelationFilter, UserWhereInput>
    name?: StringFilter | string
    dose?: StringFilter | string
    manufacturer?: StringFilter | string
    lot?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type VaccinationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    User?: UserOrderByWithRelationInput
    name?: SortOrder
    dose?: SortOrder
    manufacturer?: SortOrder
    lot?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VaccinationWhereUniqueInput = {
    id?: number
  }

  export type VaccinationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    dose?: SortOrder
    manufacturer?: SortOrder
    lot?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VaccinationCountOrderByAggregateInput
    _avg?: VaccinationAvgOrderByAggregateInput
    _max?: VaccinationMaxOrderByAggregateInput
    _min?: VaccinationMinOrderByAggregateInput
    _sum?: VaccinationSumOrderByAggregateInput
  }

  export type VaccinationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VaccinationScalarWhereWithAggregatesInput>
    OR?: Enumerable<VaccinationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VaccinationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    dose?: StringWithAggregatesFilter | string
    manufacturer?: StringWithAggregatesFilter | string
    lot?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ExamWhereInput = {
    AND?: Enumerable<ExamWhereInput>
    OR?: Enumerable<ExamWhereInput>
    NOT?: Enumerable<ExamWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    User?: XOR<UserRelationFilter, UserWhereInput>
    name?: StringFilter | string
    examType?: StringFilter | string
    description?: StringFilter | string
    local?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ExamOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    User?: UserOrderByWithRelationInput
    name?: SortOrder
    examType?: SortOrder
    description?: SortOrder
    local?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExamWhereUniqueInput = {
    id?: number
  }

  export type ExamOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    examType?: SortOrder
    description?: SortOrder
    local?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ExamCountOrderByAggregateInput
    _avg?: ExamAvgOrderByAggregateInput
    _max?: ExamMaxOrderByAggregateInput
    _min?: ExamMinOrderByAggregateInput
    _sum?: ExamSumOrderByAggregateInput
  }

  export type ExamScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ExamScalarWhereWithAggregatesInput>
    OR?: Enumerable<ExamScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ExamScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    examType?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    local?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserCreateInput = {
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionCreateNestedManyWithoutUserInput
    Measurement?: MeasurementCreateNestedManyWithoutUserInput
    Vaccination?: VaccinationCreateNestedManyWithoutUserInput
    Exam?: ExamCreateNestedManyWithoutUserInput
    PatientInformation?: PatientInformationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    Measurement?: MeasurementUncheckedCreateNestedManyWithoutUserInput
    Vaccination?: VaccinationUncheckedCreateNestedManyWithoutUserInput
    Exam?: ExamUncheckedCreateNestedManyWithoutUserInput
    PatientInformation?: PatientInformationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUpdateManyWithoutUserInput
    Measurement?: MeasurementUpdateManyWithoutUserInput
    Vaccination?: VaccinationUpdateManyWithoutUserInput
    Exam?: ExamUpdateManyWithoutUserInput
    PatientInformation?: PatientInformationUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUncheckedUpdateManyWithoutUserInput
    Measurement?: MeasurementUncheckedUpdateManyWithoutUserInput
    Vaccination?: VaccinationUncheckedUpdateManyWithoutUserInput
    Exam?: ExamUncheckedUpdateManyWithoutUserInput
    PatientInformation?: PatientInformationUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateInput = {
    User: UserCreateNestedOneWithoutSessionInput
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUncheckedCreateInput = {
    id?: number
    userId: number
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateInput = {
    User?: UserUpdateOneRequiredWithoutSessionInput
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: number
    userId: number
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeasurementCreateInput = {
    User: UserCreateNestedOneWithoutMeasurementInput
    name: string
    morning: string
    afternoon: string
    night: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeasurementUncheckedCreateInput = {
    id?: number
    userId: number
    name: string
    morning: string
    afternoon: string
    night: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeasurementUpdateInput = {
    User?: UserUpdateOneRequiredWithoutMeasurementInput
    name?: StringFieldUpdateOperationsInput | string
    morning?: StringFieldUpdateOperationsInput | string
    afternoon?: StringFieldUpdateOperationsInput | string
    night?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeasurementUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    morning?: StringFieldUpdateOperationsInput | string
    afternoon?: StringFieldUpdateOperationsInput | string
    night?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeasurementCreateManyInput = {
    id?: number
    userId: number
    name: string
    morning: string
    afternoon: string
    night: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeasurementUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    morning?: StringFieldUpdateOperationsInput | string
    afternoon?: StringFieldUpdateOperationsInput | string
    night?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeasurementUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    morning?: StringFieldUpdateOperationsInput | string
    afternoon?: StringFieldUpdateOperationsInput | string
    night?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientInformationCreateInput = {
    User: UserCreateNestedOneWithoutPatientInformationInput
    name: string
    cpf: string
    birthday: Date | string
    phone: string
    sex: string
    blood: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientInformationUncheckedCreateInput = {
    id?: number
    userId: number
    name: string
    cpf: string
    birthday: Date | string
    phone: string
    sex: string
    blood: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientInformationUpdateInput = {
    User?: UserUpdateOneRequiredWithoutPatientInformationInput
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
    sex?: StringFieldUpdateOperationsInput | string
    blood?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientInformationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
    sex?: StringFieldUpdateOperationsInput | string
    blood?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientInformationCreateManyInput = {
    id?: number
    userId: number
    name: string
    cpf: string
    birthday: Date | string
    phone: string
    sex: string
    blood: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientInformationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
    sex?: StringFieldUpdateOperationsInput | string
    blood?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientInformationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
    sex?: StringFieldUpdateOperationsInput | string
    blood?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VaccinationCreateInput = {
    User: UserCreateNestedOneWithoutVaccinationInput
    name: string
    dose: string
    manufacturer: string
    lot: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VaccinationUncheckedCreateInput = {
    id?: number
    userId: number
    name: string
    dose: string
    manufacturer: string
    lot: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VaccinationUpdateInput = {
    User?: UserUpdateOneRequiredWithoutVaccinationInput
    name?: StringFieldUpdateOperationsInput | string
    dose?: StringFieldUpdateOperationsInput | string
    manufacturer?: StringFieldUpdateOperationsInput | string
    lot?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VaccinationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    dose?: StringFieldUpdateOperationsInput | string
    manufacturer?: StringFieldUpdateOperationsInput | string
    lot?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VaccinationCreateManyInput = {
    id?: number
    userId: number
    name: string
    dose: string
    manufacturer: string
    lot: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VaccinationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    dose?: StringFieldUpdateOperationsInput | string
    manufacturer?: StringFieldUpdateOperationsInput | string
    lot?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VaccinationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    dose?: StringFieldUpdateOperationsInput | string
    manufacturer?: StringFieldUpdateOperationsInput | string
    lot?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExamCreateInput = {
    User: UserCreateNestedOneWithoutExamInput
    name: string
    examType: string
    description: string
    local: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExamUncheckedCreateInput = {
    id?: number
    userId: number
    name: string
    examType: string
    description: string
    local: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExamUpdateInput = {
    User?: UserUpdateOneRequiredWithoutExamInput
    name?: StringFieldUpdateOperationsInput | string
    examType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExamUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    examType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExamCreateManyInput = {
    id?: number
    userId: number
    name: string
    examType: string
    description: string
    local: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExamUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    examType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExamUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    examType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type MeasurementListRelationFilter = {
    every?: MeasurementWhereInput
    some?: MeasurementWhereInput
    none?: MeasurementWhereInput
  }

  export type VaccinationListRelationFilter = {
    every?: VaccinationWhereInput
    some?: VaccinationWhereInput
    none?: VaccinationWhereInput
  }

  export type ExamListRelationFilter = {
    every?: ExamWhereInput
    some?: ExamWhereInput
    none?: ExamWhereInput
  }

  export type PatientInformationListRelationFilter = {
    every?: PatientInformationWhereInput
    some?: PatientInformationWhereInput
    none?: PatientInformationWhereInput
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MeasurementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VaccinationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExamOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientInformationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type MeasurementCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    morning?: SortOrder
    afternoon?: SortOrder
    night?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeasurementAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type MeasurementMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    morning?: SortOrder
    afternoon?: SortOrder
    night?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeasurementMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    morning?: SortOrder
    afternoon?: SortOrder
    night?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeasurementSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type PatientInformationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    birthday?: SortOrder
    phone?: SortOrder
    sex?: SortOrder
    blood?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PatientInformationAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type PatientInformationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    birthday?: SortOrder
    phone?: SortOrder
    sex?: SortOrder
    blood?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PatientInformationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    birthday?: SortOrder
    phone?: SortOrder
    sex?: SortOrder
    blood?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PatientInformationSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type VaccinationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    dose?: SortOrder
    manufacturer?: SortOrder
    lot?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VaccinationAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type VaccinationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    dose?: SortOrder
    manufacturer?: SortOrder
    lot?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VaccinationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    dose?: SortOrder
    manufacturer?: SortOrder
    lot?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VaccinationSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type ExamCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    examType?: SortOrder
    description?: SortOrder
    local?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExamAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type ExamMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    examType?: SortOrder
    description?: SortOrder
    local?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExamMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    examType?: SortOrder
    description?: SortOrder
    local?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExamSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type MeasurementCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<MeasurementCreateWithoutUserInput>, Enumerable<MeasurementUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MeasurementCreateOrConnectWithoutUserInput>
    createMany?: MeasurementCreateManyUserInputEnvelope
    connect?: Enumerable<MeasurementWhereUniqueInput>
  }

  export type VaccinationCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<VaccinationCreateWithoutUserInput>, Enumerable<VaccinationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<VaccinationCreateOrConnectWithoutUserInput>
    createMany?: VaccinationCreateManyUserInputEnvelope
    connect?: Enumerable<VaccinationWhereUniqueInput>
  }

  export type ExamCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ExamCreateWithoutUserInput>, Enumerable<ExamUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ExamCreateOrConnectWithoutUserInput>
    createMany?: ExamCreateManyUserInputEnvelope
    connect?: Enumerable<ExamWhereUniqueInput>
  }

  export type PatientInformationCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<PatientInformationCreateWithoutUserInput>, Enumerable<PatientInformationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PatientInformationCreateOrConnectWithoutUserInput>
    createMany?: PatientInformationCreateManyUserInputEnvelope
    connect?: Enumerable<PatientInformationWhereUniqueInput>
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type MeasurementUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<MeasurementCreateWithoutUserInput>, Enumerable<MeasurementUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MeasurementCreateOrConnectWithoutUserInput>
    createMany?: MeasurementCreateManyUserInputEnvelope
    connect?: Enumerable<MeasurementWhereUniqueInput>
  }

  export type VaccinationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<VaccinationCreateWithoutUserInput>, Enumerable<VaccinationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<VaccinationCreateOrConnectWithoutUserInput>
    createMany?: VaccinationCreateManyUserInputEnvelope
    connect?: Enumerable<VaccinationWhereUniqueInput>
  }

  export type ExamUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ExamCreateWithoutUserInput>, Enumerable<ExamUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ExamCreateOrConnectWithoutUserInput>
    createMany?: ExamCreateManyUserInputEnvelope
    connect?: Enumerable<ExamWhereUniqueInput>
  }

  export type PatientInformationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<PatientInformationCreateWithoutUserInput>, Enumerable<PatientInformationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PatientInformationCreateOrConnectWithoutUserInput>
    createMany?: PatientInformationCreateManyUserInputEnvelope
    connect?: Enumerable<PatientInformationWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type SessionUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type MeasurementUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<MeasurementCreateWithoutUserInput>, Enumerable<MeasurementUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MeasurementCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<MeasurementUpsertWithWhereUniqueWithoutUserInput>
    createMany?: MeasurementCreateManyUserInputEnvelope
    set?: Enumerable<MeasurementWhereUniqueInput>
    disconnect?: Enumerable<MeasurementWhereUniqueInput>
    delete?: Enumerable<MeasurementWhereUniqueInput>
    connect?: Enumerable<MeasurementWhereUniqueInput>
    update?: Enumerable<MeasurementUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<MeasurementUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<MeasurementScalarWhereInput>
  }

  export type VaccinationUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<VaccinationCreateWithoutUserInput>, Enumerable<VaccinationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<VaccinationCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<VaccinationUpsertWithWhereUniqueWithoutUserInput>
    createMany?: VaccinationCreateManyUserInputEnvelope
    set?: Enumerable<VaccinationWhereUniqueInput>
    disconnect?: Enumerable<VaccinationWhereUniqueInput>
    delete?: Enumerable<VaccinationWhereUniqueInput>
    connect?: Enumerable<VaccinationWhereUniqueInput>
    update?: Enumerable<VaccinationUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<VaccinationUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<VaccinationScalarWhereInput>
  }

  export type ExamUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<ExamCreateWithoutUserInput>, Enumerable<ExamUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ExamCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ExamUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ExamCreateManyUserInputEnvelope
    set?: Enumerable<ExamWhereUniqueInput>
    disconnect?: Enumerable<ExamWhereUniqueInput>
    delete?: Enumerable<ExamWhereUniqueInput>
    connect?: Enumerable<ExamWhereUniqueInput>
    update?: Enumerable<ExamUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ExamUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ExamScalarWhereInput>
  }

  export type PatientInformationUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<PatientInformationCreateWithoutUserInput>, Enumerable<PatientInformationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PatientInformationCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<PatientInformationUpsertWithWhereUniqueWithoutUserInput>
    createMany?: PatientInformationCreateManyUserInputEnvelope
    set?: Enumerable<PatientInformationWhereUniqueInput>
    disconnect?: Enumerable<PatientInformationWhereUniqueInput>
    delete?: Enumerable<PatientInformationWhereUniqueInput>
    connect?: Enumerable<PatientInformationWhereUniqueInput>
    update?: Enumerable<PatientInformationUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<PatientInformationUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<PatientInformationScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type MeasurementUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<MeasurementCreateWithoutUserInput>, Enumerable<MeasurementUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MeasurementCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<MeasurementUpsertWithWhereUniqueWithoutUserInput>
    createMany?: MeasurementCreateManyUserInputEnvelope
    set?: Enumerable<MeasurementWhereUniqueInput>
    disconnect?: Enumerable<MeasurementWhereUniqueInput>
    delete?: Enumerable<MeasurementWhereUniqueInput>
    connect?: Enumerable<MeasurementWhereUniqueInput>
    update?: Enumerable<MeasurementUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<MeasurementUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<MeasurementScalarWhereInput>
  }

  export type VaccinationUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<VaccinationCreateWithoutUserInput>, Enumerable<VaccinationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<VaccinationCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<VaccinationUpsertWithWhereUniqueWithoutUserInput>
    createMany?: VaccinationCreateManyUserInputEnvelope
    set?: Enumerable<VaccinationWhereUniqueInput>
    disconnect?: Enumerable<VaccinationWhereUniqueInput>
    delete?: Enumerable<VaccinationWhereUniqueInput>
    connect?: Enumerable<VaccinationWhereUniqueInput>
    update?: Enumerable<VaccinationUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<VaccinationUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<VaccinationScalarWhereInput>
  }

  export type ExamUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<ExamCreateWithoutUserInput>, Enumerable<ExamUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ExamCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ExamUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ExamCreateManyUserInputEnvelope
    set?: Enumerable<ExamWhereUniqueInput>
    disconnect?: Enumerable<ExamWhereUniqueInput>
    delete?: Enumerable<ExamWhereUniqueInput>
    connect?: Enumerable<ExamWhereUniqueInput>
    update?: Enumerable<ExamUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ExamUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ExamScalarWhereInput>
  }

  export type PatientInformationUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<PatientInformationCreateWithoutUserInput>, Enumerable<PatientInformationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PatientInformationCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<PatientInformationUpsertWithWhereUniqueWithoutUserInput>
    createMany?: PatientInformationCreateManyUserInputEnvelope
    set?: Enumerable<PatientInformationWhereUniqueInput>
    disconnect?: Enumerable<PatientInformationWhereUniqueInput>
    delete?: Enumerable<PatientInformationWhereUniqueInput>
    connect?: Enumerable<PatientInformationWhereUniqueInput>
    update?: Enumerable<PatientInformationUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<PatientInformationUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<PatientInformationScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutSessionInput = {
    create?: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionInput = {
    create?: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionInput
    upsert?: UserUpsertWithoutSessionInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSessionInput, UserUncheckedUpdateWithoutSessionInput>
  }

  export type UserCreateNestedOneWithoutMeasurementInput = {
    create?: XOR<UserCreateWithoutMeasurementInput, UserUncheckedCreateWithoutMeasurementInput>
    connectOrCreate?: UserCreateOrConnectWithoutMeasurementInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMeasurementInput = {
    create?: XOR<UserCreateWithoutMeasurementInput, UserUncheckedCreateWithoutMeasurementInput>
    connectOrCreate?: UserCreateOrConnectWithoutMeasurementInput
    upsert?: UserUpsertWithoutMeasurementInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutMeasurementInput, UserUncheckedUpdateWithoutMeasurementInput>
  }

  export type UserCreateNestedOneWithoutPatientInformationInput = {
    create?: XOR<UserCreateWithoutPatientInformationInput, UserUncheckedCreateWithoutPatientInformationInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientInformationInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPatientInformationInput = {
    create?: XOR<UserCreateWithoutPatientInformationInput, UserUncheckedCreateWithoutPatientInformationInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientInformationInput
    upsert?: UserUpsertWithoutPatientInformationInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutPatientInformationInput, UserUncheckedUpdateWithoutPatientInformationInput>
  }

  export type UserCreateNestedOneWithoutVaccinationInput = {
    create?: XOR<UserCreateWithoutVaccinationInput, UserUncheckedCreateWithoutVaccinationInput>
    connectOrCreate?: UserCreateOrConnectWithoutVaccinationInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutVaccinationInput = {
    create?: XOR<UserCreateWithoutVaccinationInput, UserUncheckedCreateWithoutVaccinationInput>
    connectOrCreate?: UserCreateOrConnectWithoutVaccinationInput
    upsert?: UserUpsertWithoutVaccinationInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutVaccinationInput, UserUncheckedUpdateWithoutVaccinationInput>
  }

  export type UserCreateNestedOneWithoutExamInput = {
    create?: XOR<UserCreateWithoutExamInput, UserUncheckedCreateWithoutExamInput>
    connectOrCreate?: UserCreateOrConnectWithoutExamInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutExamInput = {
    create?: XOR<UserCreateWithoutExamInput, UserUncheckedCreateWithoutExamInput>
    connectOrCreate?: UserCreateOrConnectWithoutExamInput
    upsert?: UserUpsertWithoutExamInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutExamInput, UserUncheckedUpdateWithoutExamInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type SessionCreateWithoutUserInput = {
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: number
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: Enumerable<SessionCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type MeasurementCreateWithoutUserInput = {
    name: string
    morning: string
    afternoon: string
    night: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeasurementUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    morning: string
    afternoon: string
    night: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeasurementCreateOrConnectWithoutUserInput = {
    where: MeasurementWhereUniqueInput
    create: XOR<MeasurementCreateWithoutUserInput, MeasurementUncheckedCreateWithoutUserInput>
  }

  export type MeasurementCreateManyUserInputEnvelope = {
    data: Enumerable<MeasurementCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type VaccinationCreateWithoutUserInput = {
    name: string
    dose: string
    manufacturer: string
    lot: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VaccinationUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    dose: string
    manufacturer: string
    lot: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VaccinationCreateOrConnectWithoutUserInput = {
    where: VaccinationWhereUniqueInput
    create: XOR<VaccinationCreateWithoutUserInput, VaccinationUncheckedCreateWithoutUserInput>
  }

  export type VaccinationCreateManyUserInputEnvelope = {
    data: Enumerable<VaccinationCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ExamCreateWithoutUserInput = {
    name: string
    examType: string
    description: string
    local: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExamUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    examType: string
    description: string
    local: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExamCreateOrConnectWithoutUserInput = {
    where: ExamWhereUniqueInput
    create: XOR<ExamCreateWithoutUserInput, ExamUncheckedCreateWithoutUserInput>
  }

  export type ExamCreateManyUserInputEnvelope = {
    data: Enumerable<ExamCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type PatientInformationCreateWithoutUserInput = {
    name: string
    cpf: string
    birthday: Date | string
    phone: string
    sex: string
    blood: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientInformationUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    cpf: string
    birthday: Date | string
    phone: string
    sex: string
    blood: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientInformationCreateOrConnectWithoutUserInput = {
    where: PatientInformationWhereUniqueInput
    create: XOR<PatientInformationCreateWithoutUserInput, PatientInformationUncheckedCreateWithoutUserInput>
  }

  export type PatientInformationCreateManyUserInputEnvelope = {
    data: Enumerable<PatientInformationCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutSessionInput>
  }

  export type SessionScalarWhereInput = {
    AND?: Enumerable<SessionScalarWhereInput>
    OR?: Enumerable<SessionScalarWhereInput>
    NOT?: Enumerable<SessionScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    token?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type MeasurementUpsertWithWhereUniqueWithoutUserInput = {
    where: MeasurementWhereUniqueInput
    update: XOR<MeasurementUpdateWithoutUserInput, MeasurementUncheckedUpdateWithoutUserInput>
    create: XOR<MeasurementCreateWithoutUserInput, MeasurementUncheckedCreateWithoutUserInput>
  }

  export type MeasurementUpdateWithWhereUniqueWithoutUserInput = {
    where: MeasurementWhereUniqueInput
    data: XOR<MeasurementUpdateWithoutUserInput, MeasurementUncheckedUpdateWithoutUserInput>
  }

  export type MeasurementUpdateManyWithWhereWithoutUserInput = {
    where: MeasurementScalarWhereInput
    data: XOR<MeasurementUpdateManyMutationInput, MeasurementUncheckedUpdateManyWithoutMeasurementInput>
  }

  export type MeasurementScalarWhereInput = {
    AND?: Enumerable<MeasurementScalarWhereInput>
    OR?: Enumerable<MeasurementScalarWhereInput>
    NOT?: Enumerable<MeasurementScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    name?: StringFilter | string
    morning?: StringFilter | string
    afternoon?: StringFilter | string
    night?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type VaccinationUpsertWithWhereUniqueWithoutUserInput = {
    where: VaccinationWhereUniqueInput
    update: XOR<VaccinationUpdateWithoutUserInput, VaccinationUncheckedUpdateWithoutUserInput>
    create: XOR<VaccinationCreateWithoutUserInput, VaccinationUncheckedCreateWithoutUserInput>
  }

  export type VaccinationUpdateWithWhereUniqueWithoutUserInput = {
    where: VaccinationWhereUniqueInput
    data: XOR<VaccinationUpdateWithoutUserInput, VaccinationUncheckedUpdateWithoutUserInput>
  }

  export type VaccinationUpdateManyWithWhereWithoutUserInput = {
    where: VaccinationScalarWhereInput
    data: XOR<VaccinationUpdateManyMutationInput, VaccinationUncheckedUpdateManyWithoutVaccinationInput>
  }

  export type VaccinationScalarWhereInput = {
    AND?: Enumerable<VaccinationScalarWhereInput>
    OR?: Enumerable<VaccinationScalarWhereInput>
    NOT?: Enumerable<VaccinationScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    name?: StringFilter | string
    dose?: StringFilter | string
    manufacturer?: StringFilter | string
    lot?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ExamUpsertWithWhereUniqueWithoutUserInput = {
    where: ExamWhereUniqueInput
    update: XOR<ExamUpdateWithoutUserInput, ExamUncheckedUpdateWithoutUserInput>
    create: XOR<ExamCreateWithoutUserInput, ExamUncheckedCreateWithoutUserInput>
  }

  export type ExamUpdateWithWhereUniqueWithoutUserInput = {
    where: ExamWhereUniqueInput
    data: XOR<ExamUpdateWithoutUserInput, ExamUncheckedUpdateWithoutUserInput>
  }

  export type ExamUpdateManyWithWhereWithoutUserInput = {
    where: ExamScalarWhereInput
    data: XOR<ExamUpdateManyMutationInput, ExamUncheckedUpdateManyWithoutExamInput>
  }

  export type ExamScalarWhereInput = {
    AND?: Enumerable<ExamScalarWhereInput>
    OR?: Enumerable<ExamScalarWhereInput>
    NOT?: Enumerable<ExamScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    name?: StringFilter | string
    examType?: StringFilter | string
    description?: StringFilter | string
    local?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type PatientInformationUpsertWithWhereUniqueWithoutUserInput = {
    where: PatientInformationWhereUniqueInput
    update: XOR<PatientInformationUpdateWithoutUserInput, PatientInformationUncheckedUpdateWithoutUserInput>
    create: XOR<PatientInformationCreateWithoutUserInput, PatientInformationUncheckedCreateWithoutUserInput>
  }

  export type PatientInformationUpdateWithWhereUniqueWithoutUserInput = {
    where: PatientInformationWhereUniqueInput
    data: XOR<PatientInformationUpdateWithoutUserInput, PatientInformationUncheckedUpdateWithoutUserInput>
  }

  export type PatientInformationUpdateManyWithWhereWithoutUserInput = {
    where: PatientInformationScalarWhereInput
    data: XOR<PatientInformationUpdateManyMutationInput, PatientInformationUncheckedUpdateManyWithoutPatientInformationInput>
  }

  export type PatientInformationScalarWhereInput = {
    AND?: Enumerable<PatientInformationScalarWhereInput>
    OR?: Enumerable<PatientInformationScalarWhereInput>
    NOT?: Enumerable<PatientInformationScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    name?: StringFilter | string
    cpf?: StringFilter | string
    birthday?: DateTimeFilter | Date | string
    phone?: StringFilter | string
    sex?: StringFilter | string
    blood?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserCreateWithoutSessionInput = {
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Measurement?: MeasurementCreateNestedManyWithoutUserInput
    Vaccination?: VaccinationCreateNestedManyWithoutUserInput
    Exam?: ExamCreateNestedManyWithoutUserInput
    PatientInformation?: PatientInformationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionInput = {
    id?: number
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Measurement?: MeasurementUncheckedCreateNestedManyWithoutUserInput
    Vaccination?: VaccinationUncheckedCreateNestedManyWithoutUserInput
    Exam?: ExamUncheckedCreateNestedManyWithoutUserInput
    PatientInformation?: PatientInformationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
  }

  export type UserUpsertWithoutSessionInput = {
    update: XOR<UserUpdateWithoutSessionInput, UserUncheckedUpdateWithoutSessionInput>
    create: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
  }

  export type UserUpdateWithoutSessionInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Measurement?: MeasurementUpdateManyWithoutUserInput
    Vaccination?: VaccinationUpdateManyWithoutUserInput
    Exam?: ExamUpdateManyWithoutUserInput
    PatientInformation?: PatientInformationUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Measurement?: MeasurementUncheckedUpdateManyWithoutUserInput
    Vaccination?: VaccinationUncheckedUpdateManyWithoutUserInput
    Exam?: ExamUncheckedUpdateManyWithoutUserInput
    PatientInformation?: PatientInformationUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateWithoutMeasurementInput = {
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionCreateNestedManyWithoutUserInput
    Vaccination?: VaccinationCreateNestedManyWithoutUserInput
    Exam?: ExamCreateNestedManyWithoutUserInput
    PatientInformation?: PatientInformationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMeasurementInput = {
    id?: number
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    Vaccination?: VaccinationUncheckedCreateNestedManyWithoutUserInput
    Exam?: ExamUncheckedCreateNestedManyWithoutUserInput
    PatientInformation?: PatientInformationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMeasurementInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMeasurementInput, UserUncheckedCreateWithoutMeasurementInput>
  }

  export type UserUpsertWithoutMeasurementInput = {
    update: XOR<UserUpdateWithoutMeasurementInput, UserUncheckedUpdateWithoutMeasurementInput>
    create: XOR<UserCreateWithoutMeasurementInput, UserUncheckedCreateWithoutMeasurementInput>
  }

  export type UserUpdateWithoutMeasurementInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUpdateManyWithoutUserInput
    Vaccination?: VaccinationUpdateManyWithoutUserInput
    Exam?: ExamUpdateManyWithoutUserInput
    PatientInformation?: PatientInformationUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutMeasurementInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUncheckedUpdateManyWithoutUserInput
    Vaccination?: VaccinationUncheckedUpdateManyWithoutUserInput
    Exam?: ExamUncheckedUpdateManyWithoutUserInput
    PatientInformation?: PatientInformationUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateWithoutPatientInformationInput = {
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionCreateNestedManyWithoutUserInput
    Measurement?: MeasurementCreateNestedManyWithoutUserInput
    Vaccination?: VaccinationCreateNestedManyWithoutUserInput
    Exam?: ExamCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPatientInformationInput = {
    id?: number
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    Measurement?: MeasurementUncheckedCreateNestedManyWithoutUserInput
    Vaccination?: VaccinationUncheckedCreateNestedManyWithoutUserInput
    Exam?: ExamUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPatientInformationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPatientInformationInput, UserUncheckedCreateWithoutPatientInformationInput>
  }

  export type UserUpsertWithoutPatientInformationInput = {
    update: XOR<UserUpdateWithoutPatientInformationInput, UserUncheckedUpdateWithoutPatientInformationInput>
    create: XOR<UserCreateWithoutPatientInformationInput, UserUncheckedCreateWithoutPatientInformationInput>
  }

  export type UserUpdateWithoutPatientInformationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUpdateManyWithoutUserInput
    Measurement?: MeasurementUpdateManyWithoutUserInput
    Vaccination?: VaccinationUpdateManyWithoutUserInput
    Exam?: ExamUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutPatientInformationInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUncheckedUpdateManyWithoutUserInput
    Measurement?: MeasurementUncheckedUpdateManyWithoutUserInput
    Vaccination?: VaccinationUncheckedUpdateManyWithoutUserInput
    Exam?: ExamUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateWithoutVaccinationInput = {
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionCreateNestedManyWithoutUserInput
    Measurement?: MeasurementCreateNestedManyWithoutUserInput
    Exam?: ExamCreateNestedManyWithoutUserInput
    PatientInformation?: PatientInformationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutVaccinationInput = {
    id?: number
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    Measurement?: MeasurementUncheckedCreateNestedManyWithoutUserInput
    Exam?: ExamUncheckedCreateNestedManyWithoutUserInput
    PatientInformation?: PatientInformationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutVaccinationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVaccinationInput, UserUncheckedCreateWithoutVaccinationInput>
  }

  export type UserUpsertWithoutVaccinationInput = {
    update: XOR<UserUpdateWithoutVaccinationInput, UserUncheckedUpdateWithoutVaccinationInput>
    create: XOR<UserCreateWithoutVaccinationInput, UserUncheckedCreateWithoutVaccinationInput>
  }

  export type UserUpdateWithoutVaccinationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUpdateManyWithoutUserInput
    Measurement?: MeasurementUpdateManyWithoutUserInput
    Exam?: ExamUpdateManyWithoutUserInput
    PatientInformation?: PatientInformationUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutVaccinationInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUncheckedUpdateManyWithoutUserInput
    Measurement?: MeasurementUncheckedUpdateManyWithoutUserInput
    Exam?: ExamUncheckedUpdateManyWithoutUserInput
    PatientInformation?: PatientInformationUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateWithoutExamInput = {
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionCreateNestedManyWithoutUserInput
    Measurement?: MeasurementCreateNestedManyWithoutUserInput
    Vaccination?: VaccinationCreateNestedManyWithoutUserInput
    PatientInformation?: PatientInformationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutExamInput = {
    id?: number
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    Measurement?: MeasurementUncheckedCreateNestedManyWithoutUserInput
    Vaccination?: VaccinationUncheckedCreateNestedManyWithoutUserInput
    PatientInformation?: PatientInformationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutExamInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutExamInput, UserUncheckedCreateWithoutExamInput>
  }

  export type UserUpsertWithoutExamInput = {
    update: XOR<UserUpdateWithoutExamInput, UserUncheckedUpdateWithoutExamInput>
    create: XOR<UserCreateWithoutExamInput, UserUncheckedCreateWithoutExamInput>
  }

  export type UserUpdateWithoutExamInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUpdateManyWithoutUserInput
    Measurement?: MeasurementUpdateManyWithoutUserInput
    Vaccination?: VaccinationUpdateManyWithoutUserInput
    PatientInformation?: PatientInformationUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutExamInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUncheckedUpdateManyWithoutUserInput
    Measurement?: MeasurementUncheckedUpdateManyWithoutUserInput
    Vaccination?: VaccinationUncheckedUpdateManyWithoutUserInput
    PatientInformation?: PatientInformationUncheckedUpdateManyWithoutUserInput
  }

  export type SessionCreateManyUserInput = {
    id?: number
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeasurementCreateManyUserInput = {
    id?: number
    name: string
    morning: string
    afternoon: string
    night: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VaccinationCreateManyUserInput = {
    id?: number
    name: string
    dose: string
    manufacturer: string
    lot: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExamCreateManyUserInput = {
    id?: number
    name: string
    examType: string
    description: string
    local: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientInformationCreateManyUserInput = {
    id?: number
    name: string
    cpf: string
    birthday: Date | string
    phone: string
    sex: string
    blood: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateWithoutUserInput = {
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeasurementUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    morning?: StringFieldUpdateOperationsInput | string
    afternoon?: StringFieldUpdateOperationsInput | string
    night?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeasurementUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    morning?: StringFieldUpdateOperationsInput | string
    afternoon?: StringFieldUpdateOperationsInput | string
    night?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeasurementUncheckedUpdateManyWithoutMeasurementInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    morning?: StringFieldUpdateOperationsInput | string
    afternoon?: StringFieldUpdateOperationsInput | string
    night?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VaccinationUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    dose?: StringFieldUpdateOperationsInput | string
    manufacturer?: StringFieldUpdateOperationsInput | string
    lot?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VaccinationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    dose?: StringFieldUpdateOperationsInput | string
    manufacturer?: StringFieldUpdateOperationsInput | string
    lot?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VaccinationUncheckedUpdateManyWithoutVaccinationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    dose?: StringFieldUpdateOperationsInput | string
    manufacturer?: StringFieldUpdateOperationsInput | string
    lot?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExamUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    examType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExamUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    examType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExamUncheckedUpdateManyWithoutExamInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    examType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientInformationUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
    sex?: StringFieldUpdateOperationsInput | string
    blood?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientInformationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
    sex?: StringFieldUpdateOperationsInput | string
    blood?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientInformationUncheckedUpdateManyWithoutPatientInformationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
    sex?: StringFieldUpdateOperationsInput | string
    blood?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}